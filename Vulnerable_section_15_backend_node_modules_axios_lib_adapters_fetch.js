 import composeSignals from "../helpers/composeSignals.js";
 import {trackStream} from "../helpers/trackStream.js";
 import AxiosHeaders from "../core/AxiosHeaders.js";
import progressEventReducer from "../helpers/progressEventReducer.js";
 import resolveConfig from "../helpers/resolveConfig.js";
 import settle from "../core/settle.js";
 
const fetchProgressDecorator = (total, fn) => {
  const lengthComputable = total != null;
  return (loaded) => setTimeout(() => fn({
    lengthComputable,
    total,
    loaded
  }));
}

 const isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
 const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';
 
     async (str) => new Uint8Array(await new Response(str).arrayBuffer())
 );
 
const supportsRequestStream = isReadableStreamSupported && (() => {
   let duplexAccessed = false;
 
   const hasContentType = new Request(platform.origin, {
   }).headers.has('Content-Type');
 
   return duplexAccessed && !hasContentType;
})();
 
 const DEFAULT_CHUNK_SIZE = 64 * 1024;
 
const supportsResponseStream = isReadableStreamSupported && !!(()=> {
  try {
    return utils.isReadableStream(new Response('').body);
  } catch(err) {
    // return undefined
  }
})();
 
 const resolvers = {
   stream: supportsResponseStream && ((res) => res.body)
     return (await new Request(body).arrayBuffer()).byteLength;
   }
 
  if(utils.isArrayBufferView(body)) {
     return body.byteLength;
   }
 
       }
 
       if (_request.body) {
        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, fetchProgressDecorator(
           requestContentLength,
          progressEventReducer(onUploadProgress)
        ), null, encodeText);
       }
     }
 
     if (!utils.isString(withCredentials)) {
      withCredentials = withCredentials ? 'cors' : 'omit';
     }
 
     request = new Request(url, {
       headers: headers.normalize().toJSON(),
       body: data,
       duplex: "half",
      withCredentials
     });
 
     let response = await fetch(request);
 
       const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));
 
       response = new Response(
        trackStream(response.body, DEFAULT_CHUNK_SIZE, onDownloadProgress && fetchProgressDecorator(
          responseContentLength,
          progressEventReducer(onDownloadProgress, true)
        ), isStreamResponse && onFinish, encodeText),
         options
       );
     }